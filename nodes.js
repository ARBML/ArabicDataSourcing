const url = "https://sheets.googleapis.com/v4/spreadsheets/1YO-Vl4DO-lnp8sQpFlcX1cDtzxFoVkCmU1PVw_ZHJDg?key=AIzaSyC6dSsmyQw-No2CJz7zuCrMGglNa3WwKHU&includeGridData=true";
function reformat_numbers(num) {
    if (num === undefined)
        return ''
    values = num.split(',')
    if (values.length < 2) {
        return num
    } else if (values.length == 2) {
        return values[0] + 'K'
    } else
        return values[0] + 'M'
}

function reformat_dialect(dialect)
{
    
    if (dialect.trim() != 'other')
    {
        dialect = dialect.split(':')[0]
        dialect = dialect.split('-')[1]
    }
    
    return dialect
}

function reformat_tasks(tasks)
{
    let out_html = ''

    tasks = tasks.split(',')
    for(let j = 0 ; j < tasks.length ; j += 1){
        out_html += tasks[j]+'</br>'
    }

    return out_html
}

function createHtml(i)
{
    let div = '<div style="font-family: Cairo, "Open Sans"> '
    let table = '<table style="border-collapse: collapse; border: none;">'
    let html_out = div + table 
    let list_to_show = ['Name', 'Year','Dialect', 'Volume', 'Tasks']
    for(let j = 0 ; j < list_to_show.length ; j += 1){

        let index_to_header = headersWhiteList.indexOf(list_to_show[j])
        let header = headersWhiteList[index_to_header]
        let value = ' ' +dataset[i][index_to_header]
        html_out += '<tr style="border: none;">'
        html_out += '<td style="border: none;">'
        html_out += '<b>'+header+'</b>'
        html_out += '</td>'
        html_out += '<td style="border: none;">'
        
        if(header == 'Volume')
        {
            html_out += reformat_numbers(value)+ ' '+ dataset[i][index_to_header+1]
        }
        else if (header == 'Name')
        {
            html_out += `<a href = "">${value}</a>`
        }
        else if (header == 'Dialect')
        {
            html_out += reformat_dialect(value)
        }
        else if (header == 'Tasks'){
            html_out += reformat_tasks(value)
        }
        else
        {
            html_out += value
        }
        
        html_out += '</td>'
        html_out += '</tr>'
    }

    return html_out+'</table>'+'</div>'
}
axios.get(url, ).then(function(response) {
    let rowData = response.data.sheets[0].data[0].rowData
    let headers = []
    headersWhiteList = ['Name', 'Link', 'License', 'Year', 'Language', 'Dialect', 'Domain', 'Form', 'Volume', 'Unit', 'Ethical Risks', 'Script', 'Access', 'Tasks', 'Venue Type']
    $('.loading-spinner').hide()
    
    // Grabbing header's index's to help us to get value's of just by header index 
    rowData[1].values.filter(header => header.formattedValue != undefined).forEach((header, headerIndex) => {
        if (headersWhiteList.includes(header.formattedValue)){
            headers.push({
                index: headerIndex,
                title: header.formattedValue
            })
        }
    })

    // console.log(headers)
    let tempRows = []
    rowData.filter(row => {
        tempRows.push(row.values)
    })
    
    // Grabbing row's values
    let rows = []
    for (let index = 2; index < tempRows.length; index++) {
        const fileds = tempRows[index]
        if (fileds != undefined) {
            // if (!isNaN(fileds[0].formattedValue)){
                rows.push(fileds)
            // }
        }
        
    }
    
        //  Createing table data
        dataset = []
        for (let index = 0; index < rows.length; index++) {
            const row = rows[index];
            let entry = {}
            if (isNaN(row[0].formattedValue))
            {
                continue
            }
            for (let index = 0; index < headersWhiteList.length; index++) {
                entry[index] = row[headers[index].index].formattedValue
            }
            dataset.push(entry)
        }
        console.log(dataset[0])
            var embeddings ={"columns":[0,1],"index":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"data":[[25.7047214508,20.1010074615],[15.0567655563,34.0272064209],[24.2176895142,25.5012817383],[21.0726089478,36.282989502],[13.4239292145,34.0645294189],[17.9059410095,22.7032222748],[14.9666032791,25.460817337],[14.8649597168,33.1599235535],[27.3622741699,40.1879577637],[19.1832790375,18.7196445465],[21.0727615356,11.3636989594],[24.5194816589,19.0672969818],[15.5279340744,33.346534729],[28.4942035675,32.5670852661],[27.1595592499,16.695186615],[18.3123283386,30.4678611755],[27.8100967407,14.5206184387],[23.6322479248,34.6573905945],[16.6973133087,33.0060768127],[20.6025753021,8.9785814285],[25.5551395416,2.785320282],[25.2812023163,39.4850654602],[17.3003349304,21.2456188202],[29.1266937256,37.7600479126],[22.8881149292,27.4858531952],[16.9306793213,21.7410011292],[20.7540092468,26.1124191284],[21.7831230164,3.1226730347],[17.5500164032,17.3178119659],[29.6673679352,16.9587116241],[29.6674461365,16.9587726593],[28.9711151123,17.7584781647],[27.5458526611,19.3202381134],[27.6009178162,15.5379524231],[28.9574794769,17.9300441742],[20.6291999817,29.3239250183],[18.9776706696,31.6555519104],[23.9418849945,12.502907753],[16.070224762,10.9807538986],[26.2803077698,19.7490177155],[21.9802322388,12.9776535034],[32.03748703,18.954366684],[14.4877624512,20.3008041382],[17.8696250916,25.1121959686],[26.9375896454,20.2761173248],[13.4866037369,19.6228466034],[22.9811649323,16.5211753845],[19.7450294495,10.0472745895],[18.738243103,8.8145570755],[26.7652549744,24.013874054],[26.8551177979,23.9571475983],[33.03698349,28.7647018433],[19.2447471619,10.8794326782],[17.1271324158,15.5996055603],[15.1092576981,22.1352729797],[25.6436004639,25.9038581848],[22.5148773193,11.2860527039],[29.859161377,13.868637085],[31.870880127,35.791557312],[8.4452953339,24.4893302917],[29.1599845886,35.1137275696],[30.1306610107,5.4168319702],[31.804599762,30.9722595215],[31.0472221375,5.109708786],[22.0507507324,9.8112249374],[30.0116081238,4.6483211517],[19.7446060181,15.9191913605],[20.7828598022,30.0706367493],[20.4824028015,16.8627891541],[14.9993438721,15.8836603165],[32.9253921509,26.9678764343],[8.4455461502,24.5254211426],[20.9177455902,32.8053741455],[11.0476379395,20.9601135254],[29.8627204895,4.4185638428],[17.6050300598,17.1768379211],[17.1504440308,34.2108917236],[28.8755702972,40.4310379028],[30.7515068054,35.5460853577],[31.2995948792,34.2344512939],[33.6097259521,35.4299316406],[32.9051094055,36.4925842285],[16.8992042542,33.0391693115],[20.5300140381,34.5937576294],[19.8061771393,35.2159614563],[25.2969284058,25.3973999023],[22.6269397736,13.1261711121],[34.5912322998,20.0695419312],[19.4913902283,34.0031890869],[16.4511070251,30.813911438],[27.4664592743,12.1744918823],[26.1480789185,2.8927745819],[26.4193782806,3.5787391663],[15.4094810486,32.5192146301],[13.4080839157,16.975730896],[15.1764984131,25.1374073029],[14.0071868896,24.3533554077],[19.3956947327,32.8129615784],[25.2813110352,42.3812332153],[16.8234596252,13.3477716446],[11.2130126953,14.4206829071],[17.768945694,31.752954483],[17.79986763,31.9067878723],[13.7227344513,17.8259410858],[30.4616127014,13.3681230545],[12.0207662582,26.2049789429],[29.7725868225,33.4488220215],[17.840297699,29.6400985718],[31.2105064392,34.3787307739],[21.9292182922,14.2752771378],[29.0936145782,15.4659366608],[23.5613079071,3.5998973846],[12.8026714325,24.9987831116],[15.6473426819,23.0100498199],[22.8616466522,3.7092266083],[13.9196147919,23.0450248718],[12.284122467,12.842748642],[17.7036094666,6.1515111923],[17.5361175537,6.3243989944],[25.8670692444,6.4470624924],[21.6194496155,4.9051246643],[21.1221256256,21.4829597473],[21.8157348633,21.9837608337],[31.2274780273,6.169629097],[25.6534957886,17.1722068787],[16.4300384521,10.3445367813],[14.0016078949,15.9646644592],[33.9505004883,29.678943634],[18.6403923035,35.4291229248],[20.1942882538,33.6551437378],[15.4815664291,26.3532028198],[22.8881149292,27.4858531952],[16.745344162,7.9884796143],[16.7083301544,36.4599494934],[16.7082309723,36.4602661133],[28.1385765076,40.4002609253],[21.8972034454,18.6657905579],[30.572511673,3.1669883728],[26.273349762,34.4607620239],[14.9611930847,8.624710083],[19.9471225739,31.7643146515],[19.717924118,36.8258743286],[33.0275306702,28.2727642059],[15.8682041168,3.4276065826],[22.1093959808,12.2389936447],[22.0867385864,8.3056907654],[20.6723957062,0.1823806763],[22.000667572,0.29255867],[21.6917724609,0.9432239532],[20.1008777618,21.1860523224],[24.4358711243,5.027261734],[12.0778112411,5.4373340607],[29.9920578003,23.3059101105],[29.5714416504,22.5436115265],[28.7971420288,42.4787597656],[20.2530612946,16.8398323059],[31.9920043945,31.1746101379],[14.5136909485,22.9188537598],[18.6180229187,8.349281311],[12.1850271225,14.3597240448],[20.2893848419,13.2351512909],[15.721036911,20.9201335907],[22.2884693146,32.2726402283],[24.1411781311,41.3638763428],[18.6624259949,12.7249002457],[29.4985485077,22.5254993439],[17.2008399963,19.1614589691],[18.6005859375,32.6139030457],[18.0214519501,15.3516263962],[26.5000209808,17.9445743561],[25.5619029999,21.5561008453],[13.8257255554,15.1334810257],[25.1051578522,42.0589141846],[10.2067041397,18.131105423],[20.8084259033,6.9771499634],[6.9505147934,19.4978237152],[6.9440727234,19.4985866547],[34.0000686646,35.209148407],[25.9468460083,29.0656242371],[27.9952144623,12.3288011551],[25.5791816711,33.9297943115],[29.0336647034,28.4128379822],[23.7958965302,5.2402267456],[26.8999519348,2.0650157928],[29.8314819336,40.0498123169],[15.6115503311,5.6084566116],[21.9353923798,31.538526535],[14.7715854645,18.6560916901],[32.8323478699,13.4684019089],[32.3777923584,4.1996212006],[15.7546043396,31.0295314789],[29.1666412354,38.4697341919],[32.3010368347,5.870554924],[20.1731529236,3.2811126709],[20.5314998627,39.2399673462],[20.0319328308,39.4233322144],[12.0501050949,5.4251823425],[17.7313690186,25.1162242889],[24.0926647186,32.7912712097],[25.1993522644,1.4499702454],[35.176361084,29.719039917],[21.4366779327,38.3632774353],[17.2129096985,19.2374458313],[22.9496650696,16.4699401855],[11.9539079666,27.692861557],[15.8200454712,0.0000038147],[32.8323478699,13.4684019089],[11.8222389221,11.6475324631],[23.7918224335,34.7837486267],[26.7684421539,37.2482681274],[23.9003562927,14.1352243423],[30.1038208008,38.8891067505],[13.6163444519,31.3296356201],[22.7792072296,5.3616695404],[24.4389839172,35.8455505371],[29.7985286713,34.5805015564],[28.3276424408,39.2264060974],[27.3222885132,29.8981494904],[32.9195213318,34.1243057251],[34.2610168457,19.9343032837],[25.5289440155,43.0791282654],[32.90599823,30.4290351868],[18.4534282684,34.4017677307],[27.7952346802,38.8777160645],[34.2975769043,19.692407608],[28.2076454163,29.4008102417],[25.2588005066,33.7985649109],[29.7688865662,34.5426597595],[24.2231464386,2.6376399994],[23.3963165283,1.4170665741],[23.0803833008,7.9150724411],[24.1285820007,9.6108598709],[17.7196598053,6.3282775879],[23.5089702606,2.9815807343],[14.4377756119,7.9742918015],[20.4878959656,20.4499320984],[12.6622180939,16.7875366211],[15.8682136536,3.4276046753],[15.8200454712,0.0],[28.9231929779,3.7814216614],[13.184841156,26.4471969604],[20.980890274,5.5153121948],[13.3567686081,26.4457969666],[20.784822464,7.0303497314],[21.7593250275,1.0244102478]]}
            var clusters = {"columns":[0],"index":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244],"data":[[7],[5],[7],[5],[5],[0],[0],[5],[6],[8],[8],[7],[5],[2],[3],[5],[3],[5],[5],[9],[1],[6],[0],[6],[7],[0],[7],[1],[4],[3],[3],[3],[3],[3],[3],[5],[5],[8],[9],[7],[8],[3],[4],[0],[7],[4],[8],[8],[9],[7],[7],[2],[8],[4],[0],[7],[8],[3],[2],[0],[2],[1],[2],[1],[8],[1],[8],[5],[8],[4],[2],[0],[5],[4],[1],[4],[5],[6],[2],[2],[2],[2],[5],[5],[5],[7],[8],[3],[5],[5],[3],[1],[1],[5],[4],[0],[0],[5],[6],[8],[4],[5],[5],[4],[3],[0],[2],[5],[2],[8],[3],[1],[0],[0],[1],[0],[4],[9],[9],[1],[1],[7],[7],[1],[3],[9],[4],[2],[5],[5],[0],[7],[9],[5],[5],[6],[8],[1],[2],[9],[5],[5],[2],[9],[8],[9],[1],[1],[1],[7],[1],[9],[7],[7],[6],[8],[2],[0],[9],[4],[8],[0],[5],[6],[8],[7],[4],[5],[8],[3],[7],[4],[6],[4],[9],[4],[4],[2],[2],[3],[2],[2],[1],[1],[6],[9],[5],[4],[3],[1],[5],[6],[1],[9],[5],[5],[9],[0],[5],[1],[2],[5],[4],[8],[0],[9],[3],[4],[5],[6],[8],[6],[5],[1],[6],[2],[6],[2],[2],[3],[6],[2],[5],[6],[3],[2],[2],[2],[1],[1],[1],[8],[9],[1],[9],[7],[4],[9],[9],[1],[0],[9],[0],[9],[1]]}
            let box = document.querySelector('.box');
            const width = box.offsetWidth;
            const height = 500;

            var svg = d3.select('svg');  
            var dimension = document.body
                .getBoundingClientRect();
            
            var tooltip = d3.select("body")
            .append("div")
            .style("position", "absolute")
            .style("background-color", "white")
            .style("border", "solid")
            .style("border-width", "1px")
            .style("border-radius", "5px")
            .style("padding", "10px")
            .style("z-index", "10")
            .style("visibility", "hidden")
            ;

            var data = d3.range(0, 220).map(function (d) {
                return {
                x: embeddings['data'][d][1],
                y: embeddings['data'][d][0]
              }
            });

            var x = d3.scaleLinear()
            .domain([-3, 40])
            .range([ 0, width ]);

            // Add Y axis
            var y = d3.scaleLinear()
                .domain([0, 40])
                .range([ height, 0]);

            
            var zoom = d3.zoom()
                .scaleExtent([.5, 10])  // This control how much you can unzoom (x0.5) and zoom (x20)
                .extent([[0, 0], [width, height]])
                .on("zoom", updateChart);
          
            var svg = d3.select("svg")
                .attr('width', width)
                .attr('height', height)
                .attr("style", "outline: thin solid gray;")
                .call(zoom)                       // Adds zoom functionality

            var canvas = svg
                .append("g")
                .attr("class", "zoomable")
            
              function updateChart() {
                if (canvas) {
                    canvas.attr("transform", d3.event.transform);
                    // recover the new scale
                    var newX = d3.event.transform.rescaleX(x);
                    var newY = d3.event.transform.rescaleY(y);
                
                
                    // update circle position
                    canvas.selectAll("circle")
                        .attr('cx', function(d) {return newX(d.x)})
                        .attr('cy', function(d) {return newY(d.y)});
                }
              }

            canvas.selectAll('circle')
                .data(data)
                .enter()
                .append('circle')
                .attr("r", function(_, i, n){
                    let vol_index = headersWhiteList.indexOf('Volume')
                    if(dataset[i][vol_index] === undefined)
                        return 10
                    let volume = parseInt(dataset[i][vol_index].replaceAll(",",""))
                    return Math.log(volume)
                }) 
                .attr('opacity', 0.7)
                .attr('cx', function(d) {
                    return x(d.x);})
                .attr('cy', function(d) {
                    return y(d.y)})
                .style('fill', function(_, i, n) {
                    const index = clusters['data'][i][0]
                    return d3.schemeCategory10[index]
                }).on("mouseover", function(_, i, n){                    
                    tooltip = tooltip.html(createHtml(i));
                    d3.select(this).style('stroke', '#eaeaea')
                    d3.select(this).style('stroke-width', '5')
                    return tooltip.style("visibility", "visible");
                })
                .on("mousemove", function(){return tooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px");})
                .on("mouseout", function(){
                    d3.select(this).style('stroke', 'white')
                    d3.select(this).style('stroke-width', '0')
                    return tooltip.style("visibility", "hidden");
                })
                .on("click", function(_, i, n){
                    let url = 'card.html?'+i;
                    window.open(url, '_blank').focus();
                });


    })
    .catch(function(error) {
        console.log(error);
    });

            
